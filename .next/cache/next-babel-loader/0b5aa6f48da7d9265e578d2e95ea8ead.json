{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User PC\\\\workspace\\\\jomed\\\\jomed-pharmacy\\\\pages\\\\resetpassword\\\\[token].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport axios from \"axios\";\nimport css from \"./reset.module.scss\";\nimport { useRouter } from 'next/router';\n\nconst ResetPassword = ({\n  valid,\n  token\n}) => {\n  const router = useRouter();\n  const {\n    0: password,\n    1: setPassword\n  } = useState();\n  const {\n    0: confirmPassword,\n    1: setConfirmPassword\n  } = useState();\n  const {\n    0: message,\n    1: setMessage\n  } = useState();\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (password === confirmPassword) {\n      try {\n        const response = await axios.post(\"http://localhost:4000/resetpassword/\" + token, {\n          \"password\": password\n        }, {\n          timeout: 30000\n        });\n        console.log(response);\n        alert(\"Password changed successfully\");\n        router.push(\"/account\");\n      } catch (err) {\n        console.log(err);\n      }\n    } else {\n      setMessage(\"Password did not match, please check again\");\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), __jsx(\"h2\", {\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Forget password\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), valid ? __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, \"Enter your new password.\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", {\n    type: \"password\",\n    placeholder: \"New password\",\n    id: \"password\",\n    value: password,\n    onChange: e => setPassword(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }), __jsx(\"input\", {\n    type: \"password\",\n    id: \"confirm_password\",\n    placeholder: \"Confirm password\",\n    value: confirmPassword,\n    onChange: e => setConfirmPassword(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 19\n    }\n  })), __jsx(\"div\", {\n    className: css.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, message), __jsx(\"button\", {\n    className: css.set_password_button,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, \"Set new password\"))) : __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, \"This link may have been expired\"));\n};\n\nconst style = {\n  \"margin\": \"auto\",\n  \"text-align\": \"center\"\n};\n\nResetPassword.getInitialProps = async ctx => {\n  const {\n    token\n  } = ctx.query;\n\n  try {\n    const res = await fetch(`http://localhost:4000/verifytoken/${token}`, {\n      method: 'GET'\n    });\n    console.log(res);\n\n    if (res.status === 200) {\n      return {\n        token,\n        valid: true\n      };\n    }\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport default ResetPassword;","map":{"version":3,"sources":["C:/Users/User PC/workspace/jomed/jomed-pharmacy/pages/resetpassword/[token].js"],"names":["useState","axios","css","useRouter","ResetPassword","valid","token","router","password","setPassword","confirmPassword","setConfirmPassword","message","setMessage","handleSubmit","event","preventDefault","response","post","timeout","console","log","alert","push","err","style","e","target","value","set_password_button","getInitialProps","ctx","query","res","fetch","method","status"],"mappings":"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","sourcesContent":["import {useState} from 'react';\r\nimport axios from \"axios\";\r\nimport css from \"./reset.module.scss\";\r\nimport { useRouter } from 'next/router';\r\n\r\nconst ResetPassword = ({ valid, token }) => {\r\n  \r\n  const router = useRouter();\r\n  \r\n  const [password, setPassword] = useState();\r\n  const [confirmPassword, setConfirmPassword] = useState();\r\n  const [message, setMessage] = useState();\r\n\r\n\r\n  const  handleSubmit = async (event) =>{\r\n    event.preventDefault();\r\n\r\n    if(password === confirmPassword){\r\n      try{\r\n  const response = await axios.post(\"http://localhost:4000/resetpassword/\"+token, {\"password\":password}, {\r\n      timeout: 30000\r\n    });\r\n    console.log(response);\r\n    alert(\"Password changed successfully\");\r\nrouter.push(\"/account\");\r\n      }catch(err){\r\n        console.log(err)\r\n      }\r\n    }else{\r\nsetMessage(\"Password did not match, please check again\");\r\n    }\r\n  \r\n  }\r\n\r\n\r\n    return (\r\n    <div>\r\n      <br />\r\n      <br />\r\n        <h2 style={style}>Forget password</h2>\r\n        <br />\r\n        {valid ? (\r\n          <>\r\n            <p style={style}>Enter your new password.</p>\r\n            <br />\r\n            <form onSubmit={handleSubmit}>\r\n              <div>\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"New password\"\r\n                  id=\"password\"\r\n                  value={password}\r\n                  onChange={e => setPassword(e.target.value)}\r\n                />\r\n                <br />\r\n                  <input\r\n                  type=\"password\"\r\n                  id=\"confirm_password\"\r\n                  placeholder=\"Confirm password\"\r\n                  value={confirmPassword}\r\n                  onChange={e => setConfirmPassword(e.target.value)}\r\n                />\r\n              </div>\r\n        <div className={css.message}>{message}</div>\r\n              <button className={css.set_password_button} type=\"submit\">Set new password</button>\r\n            </form>\r\n          </>\r\n        ) : (\r\n          <p>This link may have been expired</p>\r\n        )}\r\n     </div>\r\n    );\r\n  };\r\n\r\n  const style = {\r\n    \"margin\":\"auto\", \r\n    \"text-align\":\"center\"\r\n  }\r\n  \r\n  ResetPassword.getInitialProps = async ctx => {\r\n    const { token } = ctx.query;\r\n    try{\r\n   const res = await fetch(\r\n      `http://localhost:4000/verifytoken/${token}`,\r\n      { method: 'GET' }\r\n    )\r\n    console.log(res);\r\n    if(res.status === 200){\r\n          return { token, valid:true};\r\n    }\r\n    }catch(err){\r\nconsole.log(err);\r\n    }\r\n \r\n  };\r\n  \r\n  export default ResetPassword;"]},"metadata":{},"sourceType":"module"}