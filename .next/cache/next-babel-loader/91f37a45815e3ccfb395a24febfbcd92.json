{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useReducer } from \"react\";\nimport css from './editproduct.module.scss';\nimport axios from \"axios\";\nimport Loading from '../../components/loading';\nimport { useEffect } from 'react';\nimport Link from \"next/link\";\nimport { useRouter } from 'next/router';\nconst initialState = {\n  customerId: \"\",\n  name: \"\",\n  price: \"\",\n  category: \"\",\n  description: \"\",\n  loading: false\n}; //handle state changes with reducer\n\nconst reducer = (state, {\n  field,\n  value\n}) => {\n  return _objectSpread({}, state, {\n    [field]: value\n  });\n};\n\nconst EditProduct = ({\n  product\n}) => {\n  const router = useRouter(); //use reducer hook to dispatch change action\n\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, initialState);\n\n  const handleChange = e => {\n    dispatch({\n      field: e.target.name,\n      value: e.target.value\n    });\n  }; //during component mounting\n\n\n  useEffect(() => {\n    const customerId = localStorage.getItem(\"customerId\");\n    dispatch({\n      field: \"customerId\",\n      value: customerId\n    });\n    dispatch({\n      field: \"name\",\n      value: product.name\n    });\n    dispatch({\n      field: \"category\",\n      value: product.category\n    });\n    dispatch({\n      field: \"price\",\n      value: product.price\n    });\n    dispatch({\n      field: \"description\",\n      value: product.description\n    });\n  }, []); //submit form data to backend server\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    dispatch({\n      field: \"loading\",\n      value: true\n    });\n    const url = 'http://localhost:4000/product/' + product.product_id;\n    console.log(state);\n\n    try {\n      const response = await axios.patch(url, state, {\n        timeout: 60000\n      });\n\n      if (response.status == 200) {\n        console.log(response);\n        localStorage.setItem(\"customerId\", response);\n        dispatch({\n          field: \"loading\",\n          value: false\n        });\n        router.push(\"/admin\");\n      }\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        field: \"loading\",\n        value: false\n      });\n    }\n  };\n\n  const {\n    name,\n    price,\n    category,\n    description,\n    loading,\n    chat,\n    button\n  } = state;\n\n  if (loading) {\n    return __jsx(\"div\", {\n      className: css.editproduct\n    }, __jsx(Loading, null));\n  }\n\n  return __jsx(\"div\", {\n    className: css.editproduct\n  }, __jsx(\"div\", {\n    id: css.myForm\n  }, __jsx(\"br\", null), __jsx(\"form\", {\n    className: css.formcontainer\n  }, __jsx(\"fieldset\", null, __jsx(\"legend\", null, __jsx(\"b\", null, __jsx(\"h3\", {\n    className: css.heading\n  }, \"Edit Product\"))), __jsx(\"br\", null), __jsx(\"label\", {\n    for: \"fname\"\n  }, \"Name:\"), \" \", __jsx(\"br\", null), __jsx(\"input\", {\n    type: \"text\",\n    id: \"name\",\n    name: \"name\",\n    value: name,\n    required: true,\n    onChange: handleChange\n  }), __jsx(\"br\", null), __jsx(\"label\", {\n    for: \"price\"\n  }, \"Price:\"), \" \", __jsx(\"br\", null), __jsx(\"input\", {\n    type: \"number\",\n    id: \"price\",\n    name: \"price\",\n    value: price,\n    required: true,\n    onChange: handleChange\n  }), __jsx(\"br\", null), __jsx(\"label\", {\n    for: \"prescription\"\n  }, \"prescription details:\"), \" \", __jsx(\"br\", null), __jsx(\"textarea\", {\n    type: \"text\",\n    id: \"prescription\",\n    name: \"description\",\n    value: description,\n    required: true,\n    onChange: handleChange\n  }), __jsx(\"br\", null), __jsx(\"label\", {\n    for: \"category\"\n  }, \"category:\"), __jsx(\"select\", {\n    id: \"category\",\n    name: \"category\",\n    onChange: handleChange\n  }, __jsx(\"option\", {\n    value: \"antibiotics\",\n    selected: true\n  }, \"Antibiotics\"), __jsx(\"option\", {\n    value: \"antidiabetics\"\n  }, \"Antidiabetics\"), __jsx(\"option\", {\n    value: \"antimaleria\"\n  }, \"Antimaleria\")), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"button\", {\n    type: \"submit\",\n    className: css.btn,\n    onClick: handleSubmit\n  }, \"Submit\"), __jsx(\"button\", {\n    className: css.cancel\n  }, \" \", __jsx(Link, {\n    href: \"/admin\"\n  }, \"cancel\"))))));\n};\n\nEditProduct.getInitialProps = async function (context) {\n  const {\n    id\n  } = context.query;\n  const res = await fetch(`http://localhost:4000/product/${id}`);\n  const result = await res.json();\n  console.log(result.data);\n  const product = result.data;\n  return {\n    product\n  };\n};\n\nexport default EditProduct;","map":null,"metadata":{},"sourceType":"module"}