{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User PC\\\\workspace\\\\jomed\\\\jomed-pharmacy\\\\pages\\\\resetpassword\\\\[token].js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport axios from \"axios\";\n\nvar ResetPassword = function ResetPassword(_ref) {\n  var valid = _ref.valid,\n      token = _ref.token;\n\n  var _useState = useState(),\n      password = _useState[0],\n      setPassword = _useState[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    var response;\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.post(\"http://localhost:4000/resetpassword\", {\n              \"email\": email\n            }, {\n              timeout: 30000\n            }));\n\n          case 3:\n            response = _context.sent;\n            console.log(response);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }), __jsx(\"h2\", {\n    style: style,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"Forget password\"), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }), valid ? __jsx(React.Fragment, null, __jsx(\"p\", {\n    style: style,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, \"Enter your new password.\"), __jsx(\"br\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", {\n    type: \"password\",\n    placeholder: \"New password\",\n    value: password,\n    onChange: function onChange(e) {\n      return setPassword(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  }, \"Set new password\"))) : __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, \"This link may have been expired\"));\n};\n\nvar style = {\n  \"margin\": \"auto\",\n  \"text-align\": \"center\"\n};\n\nResetPassword.getInitialProps = function _callee(ctx) {\n  var token, valid;\n  return _regeneratorRuntime.async(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          token = ctx.query.token;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:4000/confirmation/\".concat(token), {\n            method: 'POST'\n          }));\n\n        case 3:\n          valid = _context2.sent;\n          console.log(valid);\n          return _context2.abrupt(\"return\", {\n            token: token,\n            valid: valid\n          });\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default ResetPassword;","map":{"version":3,"sources":["C:/Users/User PC/workspace/jomed/jomed-pharmacy/pages/resetpassword/[token].js"],"names":["useState","axios","ResetPassword","valid","token","password","setPassword","handleSubmit","event","preventDefault","post","email","timeout","response","console","log","style","e","target","value","getInitialProps","ctx","query","fetch","method"],"mappings":";;;;;;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAAsB;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,kBAGVJ,QAAQ,EAHE;AAAA,MAGnCK,QAHmC;AAAA,MAGzBC,WAHyB;;AAM1C,MAAOC,YAAY,GAAG,SAAfA,YAAe,CAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBA,YAAAA,KAAK,CAACC,cAAN;AADoB;AAAA,6CAEGR,KAAK,CAACS,IAAN,CAAW,qCAAX,EAAkD;AAAC,uBAAQC;AAAT,aAAlD,EAAmE;AACxFC,cAAAA,OAAO,EAAE;AAD+E,aAAnE,CAFH;;AAAA;AAEdC,YAAAA,QAFc;AAKpBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AALoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AASE,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGI;AAAI,IAAA,KAAK,EAAEG,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKKb,KAAK,GACJ,4BACE;AAAG,IAAA,KAAK,EAAEa,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAM,IAAA,QAAQ,EAAET,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,cAFd;AAGE,IAAA,KAAK,EAAEF,QAHT;AAIE,IAAA,QAAQ,EAAE,kBAAAY,CAAC;AAAA,aAAIX,WAAW,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AAAA,KAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EASE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBATF,CAHF,CADI,GAiBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAtBN,CADA;AA2BD,CA1CH;;AA4CE,IAAMH,KAAK,GAAG;AACZ,YAAS,MADG;AAEZ,gBAAa;AAFD,CAAd;;AAKAd,aAAa,CAACkB,eAAd,GAAgC,iBAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBjB,UAAAA,KADsB,GACZiB,GAAG,CAACC,KADQ,CACtBlB,KADsB;AAAA;AAAA,2CAEVmB,KAAK,8CACenB,KADf,GAEvB;AAAEoB,YAAAA,MAAM,EAAE;AAAV,WAFuB,CAFK;;AAAA;AAExBrB,UAAAA,KAFwB;AAM5BW,UAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAZ;AAN4B,4CAOvB;AAAEC,YAAAA,KAAK,EAALA,KAAF;AAASD,YAAAA,KAAK,EAALA;AAAT,WAPuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhC;;AAWA,eAAeD,aAAf","sourcesContent":["import {useState} from 'react';\r\nimport axios from \"axios\";\r\n\r\nconst ResetPassword = ({ valid, token }) => {\r\n  \r\n  \r\n  const [password, setPassword] = useState();\r\n\r\n\r\n  const  handleSubmit = async (event) =>{\r\n    event.preventDefault();\r\n    const response = await axios.post(\"http://localhost:4000/resetpassword\", {\"email\":email}, {\r\n      timeout: 30000\r\n    });\r\n    console.log(response);\r\n  }\r\n\r\n\r\n    return (\r\n    <div>\r\n      <br />\r\n      <br />\r\n        <h2 style={style}>Forget password</h2>\r\n        <br />\r\n        {valid ? (\r\n          <>\r\n            <p style={style}>Enter your new password.</p>\r\n            <br />\r\n            <form onSubmit={handleSubmit}>\r\n              <div>\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"New password\"\r\n                  value={password}\r\n                  onChange={e => setPassword(e.target.value)}\r\n                />\r\n              </div>\r\n              <button type=\"submit\">Set new password</button>\r\n            </form>\r\n          </>\r\n        ) : (\r\n          <p>This link may have been expired</p>\r\n        )}\r\n     </div>\r\n    );\r\n  };\r\n\r\n  const style = {\r\n    \"margin\":\"auto\", \r\n    \"text-align\":\"center\"\r\n  }\r\n  \r\n  ResetPassword.getInitialProps = async ctx => {\r\n    const { token } = ctx.query;\r\n    const valid = await fetch(\r\n      `http://localhost:4000/confirmation/${token}`,\r\n      { method: 'POST' }\r\n    )\r\n      console.log(valid);\r\n    return { token, valid };\r\n\r\n  };\r\n  \r\n  export default ResetPassword;"]},"metadata":{},"sourceType":"module"}