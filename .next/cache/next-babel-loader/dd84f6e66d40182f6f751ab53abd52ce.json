{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App from 'next/app';\nimport './styles.scss';\nimport Layout from '../components/layout';\nimport appContext from '../components/appcontext';\nimport fetch from 'isomorphic-unfetch'; // This default export is required in a new `pages/_app.js` file.\n\nclass MyApp extends App {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      customer: '',\n      cart: [],\n      carttotal: 0\n    });\n\n    _defineProperty(this, \"fetchCustomer\", async () => {\n      const customerId = localStorage.getItem('customerId');\n      console.log(customerId);\n      const url = \"http://localhost:4000/customer/\" + customerId;\n      const res = await fetch(url, {\n        headers: {\n          \"Authorization\": localStorage.getItem('token')\n        }\n      });\n      const data = await res.json();\n      const customer = data.data;\n      console.log(customer);\n      return customer;\n    });\n\n    _defineProperty(this, \"addToCart\", async product => {\n      //check if product is in cart already and add to quantity\n      if (product.quantity) {\n        console.log(\"found product\");\n        let productHolder = \"\";\n\n        for (let i = 0; i < this.state.cart.length; i++) {\n          if (this.state.cart[i].id == product.id) {\n            //copy the product from cart in the state\n            productHolder = this.state.cart[i];\n            console.log(this.state.cart[i]); //remove the product from cart in the state\n\n            this.state.cart.splice(i);\n            console.log(\"cart: \" + productHolder); //re-add the produc to state cart after incrementing the quantity\n\n            productHolder.quantity += 1;\n            await this.setState({\n              cart: [...this.state.cart, productHolder]\n            }); //save to local storage\n\n            localStorage.setItem('cart', JSON.stringify(this.state.cart));\n            break;\n          }\n        }\n      } else {\n        product.quantity = 1;\n        await this.setState({\n          cart: [...this.state.cart, product]\n        }); //save to local storage\n\n        localStorage.setItem('cart', JSON.stringify(this.state.cart));\n      }\n    });\n\n    _defineProperty(this, \"calculateTotal\", async price => {\n      await this.setState({\n        carttotal: this.state.carttotal + price\n      });\n      localStorage.setItem('total', JSON.stringify(this.state.carttotal));\n    });\n\n    _defineProperty(this, \"removeFromTotal\", async product => {\n      let producdToRemove = this.state.cart.filter(item => item.id === product.id);\n\n      if (this.state.carttotal >= 1 && producdToRemove) {\n        await this.setState({\n          carttotal: this.state.carttotal - product.price\n        });\n        localStorage.setItem('total', JSON.stringify(this.state.carttotal));\n      }\n    });\n\n    _defineProperty(this, \"removeFromCart\", async product => {\n      console.log(\"product: \" + product.id);\n      let newCart = this.state.cart.filter(item => item.id !== product.id);\n      await this.setState({\n        cart: newCart\n      }); //save to local storage\n\n      console.log(newCart.length);\n      localStorage.setItem('cart', JSON.stringify(this.state.cart));\n    });\n\n    _defineProperty(this, \"setCustomer\", val => {\n      console.log(\"SetCustomer: \" + val);\n      this.setState({\n        customer: val\n      });\n    });\n\n    _defineProperty(this, \"chat\", () => {\n      var Tawk_API = Tawk_API || {},\n          Tawk_LoadStart = new Date();\n\n      (function () {\n        var s1 = document.createElement(\"script\"),\n            s0 = document.getElementsByTagName(\"script\")[0];\n        s1.async = true;\n        s1.src = 'https://embed.tawk.to/5f12fe287258dc118bee7be8/default';\n        s1.charset = 'UTF-8';\n        s1.setAttribute('crossorigin', '*');\n        s0.parentNode.insertBefore(s1, s0);\n      })();\n    });\n  }\n\n  componentDidMount() {\n    this.chat();\n\n    (async () => {\n      //get cart items from local storage\n      const cart = JSON.parse(localStorage.getItem('cart')); //get cart total\n\n      const carttotal = JSON.parse(localStorage.getItem('total'));\n      const customer = await this.fetchCustomer();\n      console.log(customer);\n\n      if (cart) {\n        this.setState({\n          customer: customer,\n          cart: cart,\n          carttotal: carttotal\n        });\n      }\n    })();\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(appContext.Provider, {\n      value: {\n        cart: this.state.cart,\n        customer: this.state.customer,\n        setCustomer: this.setCustomer,\n        addToCart: this.addToCart,\n        total: this.calculateTotal,\n        removeFromCart: this.removeFromCart,\n        removeFromTotal: this.removeFromTotal,\n        carttotal: this.state.carttotal\n      }\n    }, __jsx(Layout, null, __jsx(Component, _extends({}, pageProps, {\n      className: \"jsx-1818130120\" + \" \" + (pageProps && pageProps.className != null && pageProps.className || \"\")\n    })), __jsx(_JSXStyle, {\n      id: \"1818130120\"\n    }, [\"*,*::before,*::after{box-sizing:border-box;}\"])));\n  }\n\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}