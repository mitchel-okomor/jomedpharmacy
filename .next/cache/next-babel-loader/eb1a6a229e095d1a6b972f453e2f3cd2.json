{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport ProductList from '../components/productList.js';\nimport css from './products.module.scss';\nimport fetch from 'isomorphic-unfetch';\nimport Loading from '../components/loading';\n\nvar Products = function Products(props) {\n  if (props.products.length < 1) {\n    return __jsx(\"div\", {\n      className: css.products\n    }, __jsx(Loading, null));\n  }\n\n  return __jsx(\"div\", {\n    className: css.products\n  }, __jsx(\"h1\", {\n    className: css.featured_products\n  }, \"Featured products\"), __jsx(\"div\", null, __jsx(\"h2\", null, \"Antibiotics\"), __jsx(ProductList, {\n    products: props.products\n  })), __jsx(\"div\", null, __jsx(\"h2\", null, \"Antimaleria\")), __jsx(\"div\", null, __jsx(\"h2\", null, \"Antidiabetics\")), __jsx(\"div\", null, __jsx(\"h2\", null, \"Haematenics\")), __jsx(\"div\", null, __jsx(\"h2\", null)));\n};\n\nProducts.getInitialProps = function _callee() {\n  var res, data;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:4000/products'));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          data = _context.sent;\n          return _context.abrupt(\"return\", {\n            products: data.data\n          });\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(\"Unable to load Products\");\n          return _context.abrupt(\"return\", {\n            products: []\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 10]], Promise);\n};\n\nexport default Products;","map":null,"metadata":{},"sourceType":"module"}